<?php

/**
 * Bootstrap Custom Autoloader
 * 
 * This file loads and registers our custom ComposerAutoload module
 * before the Laravel application bootstrap process begins.
 * 
 * Auto-generated by ComposerAutoload installer
 */

// Load Composer's autoloader first (for vendor packages and our module)
$composerAutoloader = require __DIR__.'/../vendor/autoload.php';

// Our ComposerAutoload module classes are now available via Composer's PSR-4 autoloading

use Pixielity\ComposerAutoload\Services\AutoloaderManager;
use Pixielity\ComposerAutoload\Services\ConfigurableDiscoveryManager;
use Pixielity\ComposerAutoload\Config\AutoloadConfig;

// Create and configure our custom autoloader
$autoloader = new AutoloaderManager();
$basePath = dirname(__DIR__);

// Load configuration for auto-discovery
$configPath = $basePath . '/config/modules/composer-autoload.php';
$discoveryManager = new ConfigurableDiscoveryManager(null, $basePath);

if (file_exists($configPath)) {
    $discoveryManager->loadConfigFromFile($configPath);
} else {
    // Fallback configuration if no config file exists
    $fallbackConfig = [
        'discovery' => [
            'enabled' => true,
            'fallback_namespaces' => [
                'App\\' => 'app',
                'Database\\Factories\\' => 'database/factories',
                'Database\\Seeders\\' => 'database/seeders',
            ],
        ],
    ];
    $discoveryManager->loadConfig($fallbackConfig);
}

// Perform auto-discovery based on configuration
$discoveredNamespaces = $discoveryManager->performAutoDiscovery($autoloader);

// Register the autoloader
$autoloader->register();

// Store the autoloader instance globally so it can be accessed later
$GLOBALS['custom_autoloader'] = $autoloader;

return $composerAutoloader;
